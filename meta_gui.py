# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'meta_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import re
from metatool import genius_album_exists, get_song_urls_from_album, update_song_metadata, startup, login


class Ui_App(QtWidgets.QMainWindow):
    def __init__(self):
        super(Ui_App, self).__init__()
        self.gridLayout_7 = QtWidgets.QGridLayout()

    def setupUi(self, Window):
        Window.setObjectName("Window")
        Window.resize(458, 557)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../Pictures/downloaded/224-2247099_genius-png-logo-black.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Window.setWindowIcon(icon)
        self.widget = QtWidgets.QWidget(Window)
        self.widget.setGeometry(QtCore.QRect(10, 10, 441, 536))
        self.widget.setObjectName("widget")
        self.mainLayout = QtWidgets.QGridLayout(self.widget)
        self.mainLayout.setContentsMargins(0, 0, 0, 0)
        self.mainLayout.setObjectName("mainLayout")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.albumUrlEdit = QtWidgets.QLineEdit(self.widget)
        self.albumUrlEdit.setObjectName("albumUrlEdit")
        self.albumUrlEdit.setToolTip("(REQUIRED) The URL of the album you want to update the metadata for.\n"
                                     "ALL songs on the album page will be updated with the metadata you specify "
                                     "on this page.\nThe delay after pasting the URL is due to the check for the page "
                                     "on Genius.\nIf you get a warning from your PC about accessing your network after "
                                     "pasting the URL,\nthis is why.")
        self.gridLayout.addWidget(self.albumUrlEdit, 1, 0, 1, 1)
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.mainLayout.addLayout(self.gridLayout, 0, 0, 1, 2)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setObjectName("label_2")
        self.gridLayout_2.addWidget(self.label_2, 0, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.artistEdit = QtWidgets.QLineEdit(self.widget)
        self.artistEdit.setObjectName("artistEdit")
        self.artistEdit.setToolTip("Add album artists. Separate artists with commas.")
        self.gridLayout_2.addWidget(self.artistEdit, 1, 0, 1, 1)
        self.mainLayout.addLayout(self.gridLayout_2, 1, 0, 1, 1)
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_3 = QtWidgets.QLabel(self.widget)
        self.label_3.setObjectName("label_3")
        self.gridLayout_3.addWidget(self.label_3, 0, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.writtenByEdit = QtWidgets.QLineEdit(self.widget)
        self.writtenByEdit.setObjectName("writtenByEdit")
        self.writtenByEdit.setToolTip("Add writers. Separate using commas.")
        self.gridLayout_3.addWidget(self.writtenByEdit, 1, 0, 1, 1)
        self.mainLayout.addLayout(self.gridLayout_3, 1, 1, 1, 1)
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_4 = QtWidgets.QLabel(self.widget)
        self.label_4.setObjectName("label_4")
        self.gridLayout_4.addWidget(self.label_4, 0, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.featuringEdit = QtWidgets.QLineEdit(self.widget)
        self.featuringEdit.setObjectName("featuringEdit")
        self.featuringEdit.setToolTip("Add featuring artist(s). Separate using commas. NOTE: this will add the featured"
                                      "artists to ALL SONGS on the album!")
        self.gridLayout_4.addWidget(self.featuringEdit, 1, 0, 1, 1)
        self.mainLayout.addLayout(self.gridLayout_4, 2, 0, 1, 1)
        self.gridLayout_5 = QtWidgets.QGridLayout()
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.label_5 = QtWidgets.QLabel(self.widget)
        self.label_5.setObjectName("label_5")
        self.gridLayout_5.addWidget(self.label_5, 0, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.producedByEdit = QtWidgets.QLineEdit(self.widget)
        self.producedByEdit.setObjectName("producedByEdit")
        self.producedByEdit.setToolTip("Add producers. Separate using commas.")
        self.gridLayout_5.addWidget(self.producedByEdit, 1, 0, 1, 1)
        self.mainLayout.addLayout(self.gridLayout_5, 2, 1, 1, 1)
        self.gridLayout_6 = QtWidgets.QGridLayout()
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.label_6 = QtWidgets.QLabel(self.widget)
        self.label_6.setObjectName("label_6")
        self.gridLayout_6.addWidget(self.label_6, 0, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.albumsEdit = QtWidgets.QLineEdit(self.widget)
        self.albumsEdit.setObjectName("albumsEdit")
        self.albumsEdit.setToolTip("Add additional albums. Separate entries by commas.")
        self.gridLayout_6.addWidget(self.albumsEdit, 1, 0, 1, 1)
        self.mainLayout.addLayout(self.gridLayout_6, 3, 0, 1, 1)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.label_7 = QtWidgets.QLabel(self.widget)
        self.label_7.setObjectName("label_7")
        self.gridLayout_7.addWidget(self.label_7, 0, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.releaseDateEdit = QtWidgets.QDateEdit(self.widget)
        self.releaseDateEdit.setObjectName("releaseDateEdit")
        self.releaseDateEdit.setDate(QtCore.QDate(1900, 1, 1))
        self.releaseDateEdit.setToolTip("Release date.\n"
                                        "Note that leaving the date as default (1/1/1900) will not update it on the\n"
                                        "song pages.")
        self.gridLayout_7.addWidget(self.releaseDateEdit, 1, 0, 1, 1)
        self.mainLayout.addLayout(self.gridLayout_7, 3, 1, 1, 1)
        self.gridLayout_8 = QtWidgets.QGridLayout()
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.label_8 = QtWidgets.QLabel(self.widget)
        self.label_8.setObjectName("label_8")
        self.gridLayout_8.addWidget(self.label_8, 0, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.recordedAtEdit = QtWidgets.QLineEdit(self.widget)
        self.recordedAtEdit.setToolTip("Location of recording. Cannot delimit using commas.")
        self.recordedAtEdit.setObjectName("recordedAtEdit")
        self.gridLayout_8.addWidget(self.recordedAtEdit, 1, 0, 1, 1)
        self.mainLayout.addLayout(self.gridLayout_8, 4, 0, 1, 1)
        self.groupBox = QtWidgets.QGroupBox(self.widget)
        self.groupBox.setObjectName("groupBox")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.label_9 = QtWidgets.QLabel(self.groupBox)
        self.label_9.setObjectName("label_9")
        self.gridLayout_9.addWidget(self.label_9, 0, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.primaryTagComboBox = QtWidgets.QComboBox(self.groupBox)
        self.primaryTagComboBox.setObjectName("primaryTagComboBox")
        self.primaryTagComboBox.addItem("")
        self.primaryTagComboBox.addItem("")
        self.primaryTagComboBox.addItem("")
        self.primaryTagComboBox.addItem("")
        self.primaryTagComboBox.addItem("")
        self.primaryTagComboBox.addItem("")
        self.gridLayout_9.addWidget(self.primaryTagComboBox, 1, 0, 1, 1)
        self.mainLayout.addWidget(self.groupBox, 4, 1, 2, 1)
        self.gridLayout_10 = QtWidgets.QGridLayout()
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.label_10 = QtWidgets.QLabel(self.widget)
        self.label_10.setObjectName("label_10")
        self.gridLayout_10.addWidget(self.label_10, 0, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.tagsEdit = QtWidgets.QLineEdit(self.widget)
        self.tagsEdit.setToolTip("Add tags. Separate tags by commas.")
        self.tagsEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.tagsEdit.setObjectName("tagsEdit")
        self.gridLayout_10.addWidget(self.tagsEdit, 1, 0, 1, 1)
        self.mainLayout.addLayout(self.gridLayout_10, 5, 0, 1, 1)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.addAdditionalCreditsButton = QtWidgets.QPushButton(self.widget)
        self.addAdditionalCreditsButton.setObjectName("addAdditionalCreditsButton")
        self.verticalLayout.addWidget(self.addAdditionalCreditsButton)
        self.roleTableWidget = QtWidgets.QTableWidget(self.widget)
        self.roleTableWidget.setToolTip("Add additional roles. Separate artists by commas.")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.roleTableWidget.sizePolicy().hasHeightForWidth())
        self.roleTableWidget.setSizePolicy(sizePolicy)
        self.roleTableWidget.setAlternatingRowColors(True)
        self.roleTableWidget.setObjectName("roleTableWidget")
        self.roleTableWidget.setColumnCount(2)
        self.roleTableWidget.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.roleTableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.roleTableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.roleTableWidget.setHorizontalHeaderItem(1, item)
        self.roleTableWidget.horizontalHeader().setVisible(True)
        self.roleTableWidget.verticalHeader().setVisible(False)
        self.verticalLayout.addWidget(self.roleTableWidget)
        self.mainLayout.addLayout(self.verticalLayout, 6, 0, 1, 2)
        self.okButton = QtWidgets.QPushButton("OK")
        self.clearButton = QtWidgets.QPushButton("Clear")
        self.okButton.setEnabled(False)
        self.mainLayout.addWidget(self.okButton, 7, 0, 1, 1)
        self.mainLayout.addWidget(self.clearButton, 7, 1, 1, 1)

        self.retranslateUi(Window)

        self.okButton.clicked.connect(lambda: self.collectInput(Window))
        self.clearButton.clicked.connect(lambda : self.clearInput())
        self.addAdditionalCreditsButton.clicked.connect(lambda: self.addRow())
        self.albumUrlEdit.textChanged.connect(lambda: self.album_validator())
        QtCore.QMetaObject.connectSlotsByName(Window)

    def retranslateUi(self, Window):
        _translate = QtCore.QCoreApplication.translate
        Window.setWindowTitle(_translate("Window", "Genius MetaTool"))
        self.label.setText(_translate("Window", "Album URL"))
        self.label_2.setText(_translate("Window", "Artist"))
        self.label_3.setText(_translate("Window", "Written By"))
        self.label_4.setText(_translate("Window", "Featuring"))
        self.label_5.setText(_translate("Window", "Produced By"))
        self.label_6.setText(_translate("Window", "Album(s)"))
        self.label_7.setText(_translate("Window", "Release Date"))
        self.label_8.setText(_translate("Window", "Recorded At"))
        self.label_9.setText(_translate("Window", "Primary Tag"))
        self.primaryTagComboBox.setItemText(0, _translate("Window", ""))
        self.primaryTagComboBox.setItemText(1, _translate("Window", "Rap"))
        self.primaryTagComboBox.setItemText(2, _translate("Window", "Pop"))
        self.primaryTagComboBox.setItemText(3, _translate("Window", "R&B"))
        self.primaryTagComboBox.setItemText(4, _translate("Window", "Rock"))
        self.primaryTagComboBox.setItemText(5, _translate("Window", "Country"))
        self.primaryTagComboBox.setItemText(6, _translate("Window", "Non-Music"))
        self.label_10.setText(_translate("Window", "Tags"))
        self.addAdditionalCreditsButton.setText(_translate("Window", "Add Additional Credits"))
        item = self.roleTableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Window", "Additional Role"))
        item = self.roleTableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Window", "Artists in Role"))

    def album_validator(self):
        album_url = self.albumUrlEdit.text()
        album_url_label = self.label
        pattern = re.compile('https://genius.com/albums/*')
        match = pattern.match(album_url)
        if match:
            exists = genius_album_exists(album_url)
            if exists:
                self.okButton.setEnabled(True)
                album_url_label.setText('Album URL')
                album_url_label.setStyleSheet('')
                return True
            else:
                album_url_label.setText('Album URL - Album page does not exist on Genius!')
                album_url_label.setStyleSheet('background-color: red')
                self.okButton.setEnabled(False)
        else:
            album_url_label.setText('Album URL - Invalid URL')
            album_url_label.setStyleSheet('background-color: yellow')
            self.okButton.setEnabled(False)

        return False

    def addRow(self):
        rowPosition = self.roleTableWidget.rowCount()
        self.roleTableWidget.insertRow(rowPosition)  # insert new row

    def clearInput(self):
        self.primaryTagComboBox.setCurrentIndex(0)
        for layout in self.mainLayout.children():
            index = 0
            field = ''
            value = ''
            while index < layout.count():
                widget = layout.itemAt(index).widget()
                if isinstance(widget, QtWidgets.QLineEdit):
                    widget.clear()
                # handle release date
                elif isinstance(widget, QtWidgets.QDateEdit):
                    widget.setDate(QtCore.QDate(1900, 1, 1))
                # iterate over the table, and add each row as a new dict entry
                elif isinstance(widget, QtWidgets.QTableWidget):
                    row_count = widget.rowCount()
                    # idk why this is the way it is
                    for row in reversed(range(row_count)):
                        widget.removeRow(row)
                index += 1

    # I shouldn't be passing Window in here but fuck it ¯\_(ツ)_/¯
    def collectInput(self, Window):
        meta_dict = {}
        # we have to handle primary tag separately because for some dumbass reason it's not in mainLayout
        combo_box = self.groupBox.findChild(QtWidgets.QComboBox)
        primary_tag = combo_box.currentText()
        # if it's not an empty string, add it to the dict
        if primary_tag:
            meta_dict.update({'Primary Tag': combo_box.currentText()})

        for layout in self.mainLayout.children():
            index = 0
            field = ''
            value = ''
            while index < layout.count():
                widget = layout.itemAt(index).widget()
                # for most boxes, use the label for the field
                if isinstance(widget, QtWidgets.QLabel):
                    field = widget.text()
                # this handles most boxes
                elif isinstance(widget, QtWidgets.QLineEdit):
                    value = widget.text()
                # handle release date
                elif isinstance(widget, QtWidgets.QDateEdit):
                    date = widget.date()
                    # check if it's the default date; if not, add it to the meta_dict
                    # this assumes that the album wasn't released Jan. 1st, 1900...
                    if date != QtCore.QDate(1900, 1, 1):
                        value = [date.month(), date.day(), date.year()]
                # iterate over the table, and add each row as a new dict entry
                elif isinstance(widget, QtWidgets.QTableWidget):
                    row_count = widget.rowCount()
                    for row in range(row_count):
                        field = widget.item(row, 0)
                        value = widget.item(row, 1)
                        if field and value:
                            values_list = value.text().split(',')
                            meta_dict.update({field.text(): values_list})
                    # we updated the dict, so clear field and values
                    field = ''
                    value = ''

                index += 1

            if field and value:
                if isinstance(value, str):
                    value = value.split(',')
                meta_dict.update({field: value})

        # lock and load
        Window.setWindowTitle("Updating metadata, this could take awhile...")
        ok = self.run_metatool_from_dict(meta_dict)
        if ok:
            Window.setWindowTitle("Album complete.")
        else:
            Window.setWindowTitle("Album failed to update. See console for info.")

    def run_metatool_from_dict(self, meta_dict):
        # we added the url from the GUI into the dict (note all dict values are lists)
        album_url = meta_dict["Album URL"][0]
        # so now we remove it since we don't want to add it to the song pages
        del meta_dict["Album URL"]

        driver = startup()
        login(driver)
        # get a list of songs to update from the album page
        song_links = get_song_urls_from_album(album_url)
        for link in song_links:
            try:
                title = update_song_metadata(driver, link, meta_dict)
            except Exception as e:
                # print but don't close the browser
                print(e)
                return False

        driver.close()
        return True
